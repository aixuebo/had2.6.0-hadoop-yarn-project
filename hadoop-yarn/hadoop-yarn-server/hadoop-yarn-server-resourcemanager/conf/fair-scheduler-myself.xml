-全局的配置信息--------------------------
<allocations>
  <queue></queue>
  <pool></pool>

  <user name="name">
	<maxRunningApps>int</maxRunningApps>
  </user>

  <userMaxAppsDefault>
	<xxxx>int</xxxx>	表示每一个人最多允许运行多少个app
  </userMaxAppsDefault>

  <defaultFairSharePreemptionTimeout>
	  <xxx>long</xxx>
  </defaultFairSharePreemptionTimeout>

  <fairSharePreemptionTimeout>
	  <xxx>long</xxx>
  </fairSharePreemptionTimeout>

  <defaultMinSharePreemptionTimeout>
	  <xxx>long</xxx>
  </defaultMinSharePreemptionTimeout>

  <defaultFairSharePreemptionThreshold>
	  <xxx>float</xxx>
  </defaultFairSharePreemptionThreshold>

  <queueMaxAppsDefault>
	  <xxx>int</xxx>
  </queueMaxAppsDefault>

  <queueMaxAMShareDefault>
	  <xxx>float</xxx>
  </queueMaxAMShareDefault>

  <defaultQueueSchedulingPolicy>
	  <xxx>String</xxx>
  </defaultQueueSchedulingPolicy>

  <defaultQueueSchedulingMode>
	  <xxx>String</xxx>
  </defaultQueueSchedulingMode>

  <queuePlacementPolicy>
  </queuePlacementPolicy>
</allocations>


注意:
0.该文件以allocations为根节点
1.queue与pool标签意义是等同的
  该标签下面存储的是一个Element元素,会进一步被解析
2.user.maxRunningApps一定有int值,user有且只有一个maxRunningApps子节点
3.userMaxAppsDefault下面一定有一个子节点,但是名字无所谓,关键是int值都会被解析
4.defaultFairSharePreemptionTimeout下面一定有一个子节点,但是名字无所谓,关键是long值都会被解析
5.fairSharePreemptionTimeout面一定有一个子节点,但是名字无所谓,关键是long值都会被解析
  该值只有在defaultFairSharePreemptionTimeout== Long.MAX_VALUE的时候才有意义,有意义的时候获取该值后*1000L;
  然后取代defaultFairSharePreemptionTimeout值
6.defaultMinSharePreemptionTimeout面一定有一个子节点,但是名字无所谓,关键是long值都会被解析
  该值获取后,代码里面 * 1000L;然后才被使用
7.defaultFairSharePreemptionThreshold面一定有一个子节点,但是名字无所谓,关键是float值都会被解析,该值要在0.0-1.0之间
8.queueMaxAppsDefault面一定有一个子节点,但是名字无所谓,关键是int值都会被解析
9.queueMaxAMShareDefault下面一定有一个子节点,但是名字无所谓,关键是float值都会被解析,该值要大于1.0
10.defaultQueueSchedulingMode与defaultQueueSchedulingPolicy标签意义是等同的
   下面一定有一个子节点,但是名字无所谓,关键是String值都会被解析,该值的字符串是SchedulingPolicy.parse(text),即是代理的字符串名称
11.queuePlacementPolicy该标签下面存储的是一个Element元素,会进一步被解析

--针对queue队列特殊解析---------------------------------------------------
  <queue name="",type='parent'>
	  <minResources>
		<xxx>String</xxx>
	  </minResources>
	  <maxResources>
		<xxx>String</xxx>
	  </maxResources>
	  <maxRunningApps>
		<xxx>int</xxx>
	  </maxRunningApps>
	  <maxAMShare>
		<xxx>float</xxx>
	  </maxAMShare>
	  <weight>
		<xxx>double</xxx>
	  </weight>
	  <minSharePreemptionTimeout>
		<xxx>long</xxx>
	  </minSharePreemptionTimeout>
	  <fairSharePreemptionTimeout>
		<xxx>long</xxx>
	  </fairSharePreemptionTimeout>
	  <fairSharePreemptionThreshold>
		<xxx>float</xxx>
	  </fairSharePreemptionThreshold>
	  <schedulingPolicy>
		<xxx>String</xxx>
	  </schedulingPolicy>
	  <schedulingMode>
		<xxx>String</xxx>
	  </schedulingMode>
	  <aclSubmitApps>
		<xxx>String</xxx>
	  </aclSubmitApps>
	  <aclAdministerApps>
		<xxx>String</xxx>
	  </aclAdministerApps>
	  <queue>
	  </queue>
	  <pool>
	  </pool>
  </queue>
0.特别关注
a.如果是叶子节点,但是标签存储了type='parent',则也将叶子节点标志位父节点.如果没有这个限制,则type='parent'取消即可
b.如果pool或者queue的name是root,则表示仅能有一个root节点,剩下的所有pool或者queue都只能被嵌套在root元素里面,不允许跟root同级别。
  同时root里面嵌套的是有name是要父子的name连接起来作为队列的name的。
  如果不是叫做root的元素,则表示根节点下可以有任意多个pool或者queue标签,同时pool或者queue里面嵌套pool或者queue的时候,不存在父子关系,即name不需要连接起来
1.minResources标签下面一定有一个子节点,但是名字无所谓,关键是String值都会被解析,该值的字符串是Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text);
2.maxResources标签下面一定有一个子节点,但是名字无所谓,关键是String值都会被解析,该值的字符串是Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text);
3.maxRunningApps标签下面一定有一个子节点,但是名字无所谓,关键是int值都会被解析
4.maxAMShare标签下面一定有一个子节点,但是名字无所谓,关键是float值都会被解析,该值要大于1.0
5.weight标签下面一定有一个子节点,但是名字无所谓,关键是double值都会被解析,该值会被进行如下解析new ResourceWeights((float)val)
6.minSharePreemptionTimeout标签下面一定有一个子节点,但是名字无所谓,关键是long值都会被解析,并且使用的时候是该值*1000L
7.fairSharePreemptionTimeout标签下面一定有一个子节点,但是名字无所谓,关键是long值都会被解析,并且使用的时候是该值*1000L
8.fairSharePreemptionThreshold标签下面一定有一个子节点,但是名字无所谓,关键是float值都会被解析,该值是0.0-1.0之间
9.schedulingPolicy与schedulingMode标签意义一样,标签下面一定有一个子节点,但是名字无所谓,关键是String值都会被解析,
  该字符串可以进行如下转换:SchedulingPolicy policy = SchedulingPolicy.parse(text);
10.aclSubmitApps标签意义一样,标签下面一定有一个子节点,但是名字无所谓,关键是String值都会被解析,
  该字符串可以进行如下转换:new AccessControlList(text),对应的是QueueACL.SUBMIT_APPLICATIONS提交权限
11.aclAdministerApps标签意义一样,标签下面一定有一个子节点,但是名字无所谓,关键是String值都会被解析,
    该字符串可以进行如下转换:new AccessControlList(text),对应的是QueueACL.ADMINISTER_QUEUE管理权限
12.pool和queue标签表示递归操作

--------------------
翻译
Queue elements: which represent queues. Queue elements can take an optional attribute ‘type’, which when set to ‘parent’ makes it a parent queue. This is useful when we want to create a parent queue without configuring any leaf queues. Each queue element may contain the following properties:
queue元素标签,代表一个队列,有type属性,可以设置为parent,表示该队列是一个父队列,这个配置在没有为一个queue配置任何叶子节点的时候尤其有用,可以标记没有配置任何叶子节点的队列是父队列
每一个queue标签有以下属性:
minResources: minimum resources the queue is entitled to, in the form “X mb, Y vcores”. 
For the single-resource fairness policy, the vcores value is ignored. 
If a queue’s minimum share is not satisfied, it will be offered available resources before any other queue under the same parent. 
Under the single-resource fairness policy, a queue is considered unsatisfied if its memory usage is below its minimum memory share.
 Under dominant resource fairness, a queue is considered unsatisfied if its usage for 
 its dominant resource with respect to the cluster capacity is below its minimum share for that resource.
  If multiple queues are unsatisfied in this situation, resources go to the queue with the smallest ratio
  between relevant resource usage and minimum. 
  Note that it is possible that a queue that is below its minimum may not immediately get up to its minimum when it submits an application, because already-running jobs may be using those resources.
minResources 表示该队列有资格的最小资源,格式是X mb, Y vcores,如果该队列的最小资源没有被满足,则在相同的父节点下的所有其他队列中,他将会提供可用的资源分配到该队列中。
如果多个队列都不满足minResources的情况下,那么就会分配到比例最小的队列中,比例算法是已经使用的资源/minResources,即谁的资源使用率最低就用谁。
maxResources: maximum resources a queue is allowed, in the form “X mb, Y vcores”. 
For the single-resource fairness policy, the vcores value is ignored. 
A queue will never be assigned a container that would put its aggregate usage over this limit.
maxResources 表示该队列使用的最大资源,格式:X mb, Y vcores,如果达到上限,则不会分配给该队列任何容器
maxRunningApps: limit the number of apps from the queue to run at once 
maxRunningApps:限制该队列运行的app最大数量
maxAMShare: limit the fraction of the queue’s fair share that can be used to run application masters. 
This property can only be used for leaf queues. For example, if set to 1.0f, 
then AMs in the leaf queue can take up to 100% of both the memory and CPU fair share. 
The value of -1.0f will disable this feature and the amShare will not be checked. The default value is 0.5f.
maxAMShare:限制公平分享的分数,被用于在AM中,该属性仅仅被使用于叶子队列
例如,如果这个值设置为1.0f,在叶子节点中的AM可以拿到100%的内存和CPU作为公平资源
如果该值是-1.0f,表示忽略该特性.AM将不会被校验,默认是0.5f
weight: to share the cluster non-proportionally with other queues. Weights default to 1, and a queue with weight 2 should receive
approximately twice as many resources as a queue with the default weight.
weight:比如一个权重是1的队列,和一个权重是2的队列,权重2的队列几乎是权重1的队列的两倍资源
schedulingPolicy: to set the scheduling policy of any queue. The allowed values are “fifo”/“fair”/“drf” or any class 
that extends org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.SchedulingPolicy. 
Defaults to “fair”. If “fifo”, apps with earlier submit times are given preference for containers, 
but apps submitted later may run concurrently if there is leftover space on the cluster after satisfying the earlier app’s requests.
schedulingPolicy:为任意一个队列都可以设置该策略,比如“fifo”/“fair”/“drf”或者自定义class,
默认是fair,如果是fifo,最早提交的app将会被分配容器,但是提交稍微晚一些的,如果在满足了最早的app请求后,集群上有残留的空间,也会同时运行,
aclSubmitApps: a list of users and/or groups that can submit apps to the queue. Refer to the ACLs section below for more info on the format of this list and how queue ACLs work.
aclSubmitApps:user/group,用于限制提交app权限的队列,
aclAdministerApps: a list of users and/or groups that can administer a queue. Currently the only administrative action is killing an application. Refer to the ACLs section below for more info on the format of this list and how queue ACLs work.
aclAdministerApps:user/group,用于限制管理app权限的队列,
minSharePreemptionTimeout: number of seconds the queue is under its minimum share before 
it will try to preempt containers to take resources from other queues. If not set, the queue will inherit the value from its parent queue.
minSharePreemptionTimeout:将会常是去其他队列中获取一个抢占资源,抢占若干秒,如果没有设置,则该值会从父队列中继承过来
fairSharePreemptionTimeout: number of seconds the queue is under its fair share threshold before 
it will try to preempt containers to take resources from other queues. If not set, the queue will inherit the value from its parent queue.
fairSharePreemptionTimeout:将会常是去其他队列中获取一个抢占资源,抢占若干秒,如果没有设置,则该值会从父队列中继承过来
fairSharePreemptionThreshold: the fair share preemption threshold for the queue. If the queue waits fairSharePreemptionTimeout without receiving fairSharePreemptionThreshold*fairShare resources, it is allowed to preempt containers to take resources from other queues. If not set, the queue will inherit the value from its parent queue.
User elements: which represent settings governing the behavior of individual users. They can contain a single property: maxRunningApps, a limit on the number of running apps for a particular user.

A userMaxAppsDefault element: which sets the default running app limit for any users whose limit is not otherwise specified.

A defaultFairSharePreemptionTimeout element: which sets the fair share preemption timeout for the root queue; overridden by fairSharePreemptionTimeout element in root queue.

A defaultMinSharePreemptionTimeout element: which sets the min share preemption timeout for the root queue; overridden by minSharePreemptionTimeout element in root queue.

A defaultFairSharePreemptionThreshold element: which sets the fair share preemption threshold for the root queue; overridden by fairSharePreemptionThreshold element in root queue.

A queueMaxAppsDefault element: which sets the default running app limit for queues; overriden by maxRunningApps element in each queue.

A queueMaxAMShareDefault element: which sets the default AM resource limit for queue; overriden by maxAMShare element in each queue.

A defaultQueueSchedulingPolicy element: which sets the default scheduling policy for queues; overriden by the schedulingPolicy element in each queue if specified. Defaults to “fair”.

A queuePlacementPolicy element: which contains a list of rule elements that tell the scheduler how to place incoming apps into queues. 
Rules are applied in the order that they are listed. Rules may take arguments. 
All rules accept the “create” argument, which indicates whether the rule can create a new queue. “Create” defaults to true; 
if set to false and the rule would place the app in a queue that is not configured in the allocations file, 
we continue on to the next rule. The last rule must be one that can never issue a continue. Valid rules are:
specified: the app is placed into the queue it requested. If the app requested no queue, i.e. it specified “default”, we continue. If the app requested a queue name starting or ending with period, i.e. names like “.q1” or “q1.” will be rejected.
user: the app is placed into a queue with the name of the user who submitted it. Periods in the username will be replace with “_dot_”, i.e. the queue name for user “first.last” is “first_dot_last”.
primaryGroup: the app is placed into a queue with the name of the primary group of the user who submitted it. Periods in the group name will be replaced with “_dot_”, i.e. the queue name for group “one.two” is “one_dot_two”.
secondaryGroupExistingQueue: the app is placed into a queue with a name that matches a secondary group of the user who submitted it. The first secondary group that matches a configured queue will be selected. Periods in group names will be replaced with “_dot_”, i.e. a user with “one.two” as one of their secondary groups would be placed into the “one_dot_two” queue, if such a queue exists.
nestedUserQueue : the app is placed into a queue with the name of the user under the queue suggested by the nested rule. This is similar to â€˜userâ€™ rule,the difference being in ‘nestedUserQueue’ rule,user queues can be created under any parent queue, while ‘user’ rule creates user queues only under root queue. Note that nestedUserQueue rule would be applied only if the nested rule returns a parent queue.One can configure a parent queue either by setting ‘type’ attribute of queue to ‘parent’ or by configuring at least one leaf under that queue which makes it a parent. See example allocation for a sample use case.
default: the app is placed into the queue specified in the ‘queue’ attribute of the default rule. If ‘queue’ attribute is not specified, the app is placed into ‘root.default’ queue.
reject: the app is rejected.